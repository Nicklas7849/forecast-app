
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
from datetime import timedelta

# Streamlit settings
st.set_page_config(page_title="LSTM Forecast Multi-feature", layout="wide")
st.title("ğŸ“¦ AI Forecast (LSTM) â€“ Multi-feature EfterspÃ¸rgselsprognose")
st.markdown(
    "Upload dine salgsdata (.csv) med kolonnerne **dato**, **antal_solgt**, **kampagne** og **helligdag**. "
    "Hvis 'kampagne' eller 'helligdag' ikke er til stede, oprettes de med vÃ¦rdi 0."
)

# Upload CSV-fil
uploaded_file = st.file_uploader("Upload CSV-fil", type="csv")

if uploaded_file:
    # IndlÃ¦s CSV og konverter dato
    df = pd.read_csv(uploaded_file, parse_dates=['dato'])
    df = df.sort_values('dato')
    
    # Renavn kolonne antal_solgt til 'demand'
    df = df.rename(columns={'antal_solgt': 'demand'})
    
    # Hvis kolonnerne 'kampagne' eller 'helligdag' ikke findes, opret dem som 0
    if 'kampagne' not in df.columns:
        df['kampagne'] = 0
    if 'helligdag' not in df.columns:
        df['helligdag'] = 0

    st.write("**Inputdata:**")
    st.dataframe(df.head(10))
    
    # VÃ¦lg features â€“ vi bruger nu 3 variable: demand, kampagne og helligdag
    features = ['demand', 'kampagne', 'helligdag']
    data = df[features].copy()
    
    # Skaler alle features
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(data)
    
    # Lav sekvenser til LSTM
    sequence_length = 10  # Brug de foregÃ¥ende 10 uger til at forudsige nÃ¦ste demand
    X, y = [], []
    # y er target: kun "demand" (den fÃ¸rste kolonne i vores matrix)
    for i in range(sequence_length, len(scaled_data)):
        X.append(scaled_data[i-sequence_length:i])
        y.append(scaled_data[i, 0])
    X, y = np.array(X), np.array(y)
    
    # Split data (vi trÃ¦ner med ca. 80%)
    train_size = int(len(X) * 0.8)
    X_train, y_train = X[:train_size], y[:train_size]
    # Her kan du ogsÃ¥ lave en test-split, men i en app er det primÃ¦rt prognose vi vil vise

    # Byg LSTM-model med input shape (sequence_length, antal_features)
    model = Sequential()
    model.add(LSTM(50, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mse')
    
    st.info("Modellen trÃ¦nes â€“ dette kan tage lidt tid...")
    model.fit(X_train, y_train, epochs=100, verbose=0)
    st.success("Modellen er trÃ¦net!")

    # Prognose de nÃ¦ste 4 uger
    # Vi starter med den sidste sekvens fra dine data
    last_sequence = scaled_data[-sequence_length:]
    predictions = []
    # Antag, at de eksterne variable (kampagne og helligdag) for fremtiden sÃ¦ttes til 0
    future_external = np.array([0, 0])  # [kampagne, helligdag]
    
    for _ in range(4):
        # Forudsig demand for den nÃ¦ste uge
        pred_scaled = model.predict(last_sequence.reshape(1, sequence_length, X_train.shape[2]), verbose=0)[0][0]
        predictions.append(pred_scaled)
        
        # Lav en ny rÃ¦kke med forudsagt demand og standard 0-vÃ¦rdier for de eksterne variable
        new_row = np.concatenate(([pred_scaled], future_external))
        # Opdater last_sequence: fjern den Ã¦ldste uge og tilfÃ¸j den nye rÃ¦kke
        last_sequence = np.append(last_sequence[1:], [new_row], axis=0)
    
    # Omvend den skalering, men kun for demand (kolonne 0)
    # Vi skal rekonstruere et array, der indeholder samme antal features, men vi kun behÃ¸ver at invers transformere demand
    pred_array = np.array(predictions).reshape(-1, 1)
    # Find skaleringsparametre for demand: 
    demand_min = scaler.data_min_[0]
    demand_max = scaler.data_max_[0]
    # Invers skalering: x_invers = x_scaled*(max-min) + min
    inversed_pred = pred_array * (demand_max - demand_min) + demand_min

    # Opret fremtidige datoer
    last_date = df['dato'].iloc[-1]
    future_dates = [last_date + timedelta(weeks=i+1) for i in range(4)]
    
    # Lav DataFrame med forecast
    forecast_df = pd.DataFrame({
        'Dato': future_dates,
        'Forventet efterspÃ¸rgsel': np.round(inversed_pred.flatten()).astype(int)
    })
    # Samlet forecast og forklaring
total_forecast = int(forecast_df['Forventet efterspÃ¸rgsel'].sum())

# Hvis 'demand' ikke findes fordi du ikke har omdÃ¸bt endnu
if 'demand' in df.columns:
    seneste_efterspÃ¸rgsel = df['demand'].iloc[-1]
else:
    seneste_efterspÃ¸rgsel = df['antal_solgt'].iloc[-1]

forventet_uge_1 = forecast_df['Forventet efterspÃ¸rgsel'].iloc[0]
Ã¦ndring = forventet_uge_1 - seneste_efterspÃ¸rgsel

seneste_kampagner = df['kampagne'].tail(10).sum() if 'kampagne' in df.columns else 0
seneste_helligdage = df['helligdag'].tail(10).sum() if 'helligdag' in df.columns else 0

forklaring = f"""
ğŸ“ˆ **Anbefaling: Bestil cirka {total_forecast} stk de nÃ¦ste 4 uger.**

Modellen har analyseret de seneste 10 uger og vurderer:
- Seneste kendte efterspÃ¸rgsel: **{seneste_efterspÃ¸rgsel} stk**
- Forventet efterspÃ¸rgsel i kommende uge: **{int(forventet_uge_1)} stk**
- Det er en **{'stigning' if Ã¦ndring > 0 else 'reduktion'} pÃ¥ {abs(int(Ã¦ndring))} stk**
"""

if seneste_kampagner > 0:
    forklaring += f"- **{seneste_kampagner} kampagner** i de sidste 10 uger pÃ¥virker forudsigelsen\n"
if seneste_helligdage > 0:
    forklaring += f"- **{seneste_helligdage} helligdage** kan have dÃ¦mpet efterspÃ¸rgslen\n"

forklaring += "\nğŸ“Š Prognosen bygger pÃ¥ historiske mÃ¸nstre og seneste data."

st.markdown(forklaring)

    st.subheader("ğŸ“Š Prognose â€“ de nÃ¦ste 4 uger")
    st.dataframe(forecast_df)
    
    # Vis graf: Plot historisk demand og forecast
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(df['dato'], df['demand'], label="Historisk efterspÃ¸rgsel")
    ax.plot(forecast_df['Dato'], forecast_df['Forventet efterspÃ¸rgsel'], 
            label="Forecast", linestyle="--", marker='o')
    ax.set_title("Multi-feature LSTM EfterspÃ¸rgselsprognose")
    ax.set_xlabel("Dato")
    ax.set_ylabel("EfterspÃ¸rgsel")
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)
    
# Udregn samlet forecast
total_forecast = int(forecast_df['Forventet efterspÃ¸rgsel'].sum())

# Beregn Ã¦ndring i sidste kendte efterspÃ¸rgsel
if 'demand' in df.columns:
    seneste_efterspÃ¸rgsel = df['demand'].iloc[-1]
else:
    seneste_efterspÃ¸rgsel = df['antal_solgt'].iloc[-1]  # fallback

forventet_uge_1 = forecast_df['Forventet efterspÃ¸rgsel'].iloc[0]
Ã¦ndring = forventet_uge_1 - seneste_efterspÃ¸rgsel

# Vurder om kampagne eller helligdag har vÃ¦ret aktiv i de seneste uger
seneste_kampagner = df['kampagne'].tail(10).sum() if 'kampagne' in df.columns else 0
seneste_helligdage = df['helligdag'].tail(10).sum() if 'helligdag' in df.columns else 0

# Forklaringsblok
forklaring = f"""
ğŸ“ˆ **Anbefaling: Bestil cirka {total_forecast} stk de nÃ¦ste 4 uger.**

Modellen har analyseret de seneste 10 uger og vurderer:
- Seneste kendte efterspÃ¸rgsel: **{seneste_efterspÃ¸rgsel} stk**
- Forventet efterspÃ¸rgsel i kommende uge: **{int(forventet_uge_1)} stk**
- Det er en **{'stigning' if Ã¦ndring > 0 else 'reduktion'} pÃ¥ {abs(int(Ã¦ndring))} stk**

"""

# TilfÃ¸j kampagne og helligdag hvis relevant
if seneste_kampagner > 0:
    forklaring += f"- **{seneste_kampagner} kampagner** i de sidste 10 uger pÃ¥virker forudsigelsen\n"
if seneste_helligdage > 0:
    forklaring += f"- **{seneste_helligdage} helligdage** kan have dÃ¦mpet efterspÃ¸rgslen\n"

forklaring += "\nğŸ“Š Prognosen bygger pÃ¥ historiske mÃ¸nstre og seneste data."

# Vis forklaring
st.markdown(forklaring)

# Beregn Ã¦ndring i sidste kendte efterspÃ¸rgsel
seneste_efterspÃ¸rgsel = df['demand'].iloc[-1]
forventet_uge_1 = forecast_df['Forventet efterspÃ¸rgsel'].iloc[0]
Ã¦ndring = forventet_uge_1 - seneste_efterspÃ¸rgsel

# Vurder om kampagne eller helligdag har vÃ¦ret aktiv i de seneste uger
seneste_kampagner = df['kampagne'].tail(10).sum()
seneste_helligdage = df['helligdag'].tail(10).sum()

# Forklaringstekst
forklaring = f"""
ğŸ“ˆ **Anbefaling: Bestil cirka {total_forecast} stk de nÃ¦ste 4 uger.**

Modellen har set pÃ¥ de seneste 10 ugers udvikling og vurderer:
- Den seneste efterspÃ¸rgsel var **{seneste_efterspÃ¸rgsel} stk**
- Den fÃ¸rste uge i forecast forventes at lande pÃ¥ **{int(forventet_uge_1)} stk**, hvilket er en {'stigning' if Ã¦ndring > 0 else 'reduktion'} pÃ¥ ca. **{abs(int(Ã¦ndring))} stk**

"""

# TilfÃ¸j pÃ¥virkning fra kampagner og helligdage
if seneste_kampagner > 0:
    forklaring += f"- Der var **{seneste_kampagner} kampagner** i de seneste 10 uger, hvilket kan have lÃ¸ftet salget\n"
if seneste_helligdage > 0:
    forklaring += f"- Der var **{seneste_helligdage} uger med helligdage**, som modellen ogsÃ¥ har taget hÃ¸jde for\n"

forklaring += "\nğŸ“Š Modellen baserer sin anbefaling pÃ¥ tendenser, mÃ¸nstre og variationer i dine seneste data."

# Vis forklaring
st.markdown(forklaring)
